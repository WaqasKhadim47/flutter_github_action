on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

  workflow_dispatch:

name: "Build & Release"
jobs:
  # version:
  #   name: Create version number
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Install GitVersion
  #       uses: gittools/actions/gitversion/setup@v0.9.6
  #       with:
  #         versionSpec: '5.x'

  #     - name: Use GitVersion
  #       id: gitversion
  #       uses: gittools/actions/gitversion/execute@v0.9.6
          
          

  #     # - name: Install GitVersion
  #     #   uses: gittools.gittools.setup-gitversion-task.gitversion/setup@0
  #     #   with:
  #     #     versionSpec: "5.3.x"

  #     # - name: Use GitVersion
  #     #   id: gitversion
  #     #   uses: gittools.gittools.execute-gitversion-task.gitversion/execute@0
  #     #   inputs:
  #     #     useConfigFile: true
  #     #     configFilePath: 'GitVersion.yml'
        


  #     - name: Create version.txt with nuGetVersion
  #       run: echo ${{ steps.gitversion.outputs.nuGetVersion  }} > version.txt
  #     - name: Upload version.txt
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: gitversion
  #         path: version.txt

  # build:
  #   name: Create Android Build
  #   needs: version
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Get version.txt
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: gitversion
  #     - name: Create new file without newline char from version.txt
  #       run: tr -d '\n' < version.txt > version1.txt
  #     - name: Read version
  #       id: version
  #       uses: juliangruber/read-file-action@v1
  #       with:
  #         path: version1.txt
  #     - name: Update version in YAML
  #       run: sed -i 's/99.99.99+99/${{ steps.version.outputs.content }}+${{ github.run_number }}/g' pubspec.yaml
  #     - name: Download Android keystore
  #       id: android_keystore
  #       uses: timheuer/base64-to-file@v1.0.3
  #       with:
  #         fileName: upload-keystore.jks
  #         encodedString: ${{ secrets.SIGNING_KEY }}
  #     - name: Create key.properties
  #       run: |
  #         echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
  #         echo "storePassword=${{ secrets.KEY_STORE_PASSWORD }}" >> android/key.properties
  #         echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
  #         echo "keyAlias=${{ secrets.ALIAS }}" >> android/key.properties
  #     - uses: actions/setup-java@v3
  #       with:
  #         distribution: 'zulu'
  #         java-version: "12.x"
  #         cache: gradle
  #     - uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: "3.7.8"
  #         channel: 'stable'
  #         cache: true
      
  #     - name: Get dependencies
  #       run: flutter pub get
      
  #     - name: Run flutter test
  #       run: flutter test

  #     - name: Start Android Release Build
  #       run: flutter build appbundle

  #     - name: Upload Android Release
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: android-release
  #         path: build/app/outputs/bundle/release/app-release.aab

  # deploy:
  #   name: Deploy Android Build
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Get Android Build from artifacts
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: android-release
  #   - name: Release Build to internal track
  #     uses: r0adkll/upload-google-play@v1
  #     with:
  #       serviceAccountJsonPlainText: ${{ secrets.PLAYSTORE_ACCOUNT_KEY }}
  #       packageName: <YOUR_PACKAGE_NAME>
  #       releaseFiles: app-release.aab
  #       track: alpha
  #       status: completed

  # deploy:
  #   name: Deploy Android Build
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Get Android Build from artifacts
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: android-release
  #   - name: Release Build
  #     uses: ncipollo/release-action@v1
  #     with:
  #       artifacts: app-release.aab
  #       tag: v1.0.${{ github.run_number }}
  #       token: ${{ secrets.TOKEN }}
  #       status: completed

  # deploy:
  #   name: Push to Releases
  #   uses: ncipollo/release-action@v1
  #   with:
  #     artifacts: "build/app/outputs/bundle/release/app-release.aab"
  #     tag: v1.0.${{ github.run_number }}
  #     token: ${{ secrets.TOKEN }}

          #,build/ios/iphoneos/app.ipa
  deployIos:
    name: Build & deploy iOS release
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Apple certificate and provisioning profile
        env:
          P12_DISTRIBUTION_CERTIFICATE_BASE64: "${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_BASE64 }}"
          P12_DISTRIBUTION_CERTIFICATE_PASSWORD: "${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_PASSWORD }}"
          DISTRIBUTION_PROVISIONING_PROFILE_BASE64: "${{ secrets.IOS_DISTRIBUTION_PROVISIONING_PROFILE_BASE64 }}"
          KEYCHAIN_PASSWORD: "${{ secrets.IOS_RUNNER_LOCAL_KEYCHAIN_PASSWORD }}"
          EXPORT_OPTIONS_BASE64: "${{ secrets.IOS_EXPORT_OPTIONS_BASE64 }}"
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # EXPORT_OPTIONS_PATH="${{ github.workspace }}/ios/Runner/ExportOptions.plist"

          # import certificate, provisioning profile and export options from secrets
          echo -n "$P12_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PROVISIONING_PROFILE_PATH
          # echo -n "$EXPORT_OPTIONS_BASE64" | base64 --decode -o $EXPORT_OPTIONS_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: üìù Edit pubspec version
        run: |
          sed -Ei "" "s/^version: (.*)/version: ${{ inputs.new-pubspec-version }}/" pubspec.yaml
      - name: ‚öôÔ∏è Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.7.0"
          channel: 'stable'
          cache: true
        id: flutter
      - name: Flutter pub get
        run: flutter pub get
      # - name: ‚öôÔ∏è Setup Melos
      #   uses: bluefireteam/melos-action@v2
      # - name: ‚öôÔ∏è Install dependencies for all packages
      #   run: melos build:pub_get:all
      - name: üçèüì¶ Create iOS appbundle release
        run: |
          pushd app/
          flutter build ipa \
            --release \
            --flavor ${{ inputs.flavor }} \
            --target lib/main_${{ inputs.flavor }}.dart \
            --export-options-plist=ios/Runner/ExportOptions.plist
          popd
      # - name: üçèüöÄ Deploy to App Store (Testflight)
      #   uses: apple-actions/upload-testflight-build@v1
      #   with:
      #     app-path: ${{ github.workspace }}/app/build/ios/ipa/flutter_ci_cd_demo.ipa
      #     issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      #     api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      #     api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}