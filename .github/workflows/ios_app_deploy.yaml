on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

  workflow_dispatch:

name: "Build & Release IOS"
jobs:

  deployIos:
    name: Build & deploy iOS release
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Apple certificate and provisioning profile
        env:
          P12_DISTRIBUTION_CERTIFICATE_BASE64: "${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_BASE64 }}"
          P12_DISTRIBUTION_CERTIFICATE_PASSWORD: "${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_PASSWORD }}"
          DISTRIBUTION_PROVISIONING_PROFILE_BASE64: "${{ secrets.IOS_DISTRIBUTION_PROVISIONING_PROFILE_BASE64 }}"
          KEYCHAIN_PASSWORD: "${{ secrets.IOS_RUNNER_LOCAL_KEYCHAIN_PASSWORD }}"
          EXPORT_OPTIONS_BASE64: "${{ secrets.IOS_EXPORT_OPTIONS_BASE64 }}"
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          EXPORT_OPTIONS_PATH="${{ github.workspace }}/ios/Runner/ExportOptions.plist"

          # import certificate, provisioning profile and export options from secrets
          echo -n "$P12_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PROVISIONING_PROFILE_PATH
          echo -n "$EXPORT_OPTIONS_BASE64" | base64 --decode -o $EXPORT_OPTIONS_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: üìù Edit pubspec version
        run: |
          sed -Ei "" "s/^version: (.*)/version: ${{ inputs.new-pubspec-version }}/" pubspec.yaml


  setup_flutter:
   name: Setup Flutter Platform & Build IPA
   runs-on: macos-latest
   steps:
     - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.7.8"
          channel: 'stable'
          cache: true
        id: flutter
     - name: Flutter pub get
        run: flutter pub get

     - name: Flutter run test
        run: flutter test
      
      - name: Create iOS appbundle release
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist

      - name: Upload IOS Release
        uses: actions/upload-artifact@v2
        with:
          name: ios-release
          path: ${{ github.workspace }}/app/build/ios/ipa/flutter_github_action.ipa
        
          
      # - name: üçèüöÄ Deploy to App Store (Testflight)
      #   uses: apple-actions/upload-testflight-build@v1
      #   with:
      #     app-path: ${{ github.workspace }}/app/build/ios/ipa/flutter_github_action.ipa
      #     issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      #     api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      #     api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}

 deploy:
  name: Deploy IOS Build
  needs: build
  runs-on: macos-latest
  steps:
    - uses: actions/checkout@v1
    - name: Get IOS Build from artifacts
      uses: actions/download-artifact@v2
      with:
        name: ios-release
    - name: Release Build
      uses: ncipollo/release-action@v1
      with:
        artifacts: flutter_github_action.ipa
        tag: v1.0.${{ github.run_number }}
        token: ${{ secrets.TOKEN }}
        status: completed